package controller;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;

import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;
import model.Inventory;
import model.Part;
import model.Product;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

/**This controller class allows to open multiple forms and to delete parts and products from the lists.
 * <p>
 * The <code>mainForm</code> class implements the <code>Initializable</code> interface and
 * Provides control to the data flow into model objects and updates the view <code>mainForm</code> FXML file.
 *
 *
 * @author Myriam Drouin-Sagar
 */
public class mainForm implements Initializable {
    /**
     * Table view displaying the parts
     */
    public TableView<Part> partsPane;

    /**
     * The id column for the parts' table view
     */
    public TableColumn<Part, Integer> partID;

    /**
     * The name column for the part's table view
     */
    public TableColumn<Part, String> partName;

    /**
     * The inventory level column for the part's table view
     */
    public TableColumn<Part, Integer> partInventoryLevel;

    /**
     * The price column for the parts' table view
     */
    public TableColumn<Part, Double> partPricePerUnit;

    /**
     * Table view displaying all the products
     */
    public TableView<Product> productsPane;
    /**
     * The id column for the products' table view
     */
    public TableColumn<Product, Integer> productID;

    /**
     * The name column for the products' table view
     */
    public TableColumn<Product, String> productName;

    /**
     * The inventory level column for the product's table view
     */
    public TableColumn<Product, Integer> productInventoryLevel;

    /**
     * The price column for the products' table view
     */
    public TableColumn<Product, Double> productPricePerUnit;

    /**
     * The button to add a part and open the <code>addPartForm</code>
     */
    public Button addPartButton;

    /**
     * The button to modify a part and open the <code>modifyPartForm</code>
     */
    public Button modifyPartButton;

    /**
     * The button to remove a part from the parts' table view partsPane
     */
    public Button deletePartButton;

    /**
     * The button to add a product to the products' table view productsPane and open the <code>addProductForm</code>
     */
    public Button addProductButton;

    /**
     * The button to modify a product and open the <code>modifyProductForm</code>
     */
    public Button modifyProductButton;

    /**
     * The button to remove a product from the products' table view productsPane
     */
    public Button deleteProductButton;

    /**
     * The button to initiate a part search
     */
    public Button searchPartButton;

    /**
     * The button to initiate a product search
     */
    public Button searchProductButton;

    /**
     * The product's table view text field to search for a product
     */
    public TextField searchProductText;

    /**
     * The part's table view text field to search for a part
     */
    public TextField searchPartText;

    /**
     * The button to close the application
     */
    public Button exitButton;

    /**
     * The part to be modified
     */
    public static Part partToModify;

    /**
     * The product to be modified
     */
    public static Product productToModify;

    /**Gets the part selected by the user in the partsPane table view.
     * @return the part object to modify
     */
    public static Part getPartToModify(){
        return partToModify;
    }

    /**Gets the product selected by the user in the productsPane table view.
     * @return The product object to modify
     */
    public static Product getProductToModify(){
        return productToModify;
    }

    /**Searches a part by id first, and then by partial or full name.
     * <p>
     * Gets the value from the part's table view text field.
     * Catches a <code>NumberFormatException</code>: if a string is found, the method will search for the partial name.
     * If the text field searchPartText is empty, the table view is repopulated.
     * <p>
     * If a part is found by id, the part object is highlighted in the table view.
     * If a part is found by name, the part object is filtered in the table view.
     * If not part is found an information message is displayed.
     *
     * @param actionEvent The event generated by the Search button searchPartButton clicked by the user or passed from the keyEvent (never used)
     */
    public void onSearchPart(ActionEvent actionEvent) {
        //Try to search by ID first

        try {
            if (searchPartText.getText().isEmpty()){ //If search field is set to empty, repopulate the table
                partsPane.setItems(Inventory.getAllParts());
                return;
            }
            Part part = Inventory.lookupPart(Integer.parseInt(searchPartText.getText()));
            if(part == null){
                throw new NumberFormatException();
            }
            partsPane.getSelectionModel().select(part);
        }
        catch (NumberFormatException e ) {
            String sp = searchPartText.getText();
            ObservableList<Part> partsNameFound = Inventory.lookupPart(sp);
            if(partsNameFound == null){
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Information");
                alert.setHeaderText("Part not Found");
                alert.showAndWait();
                searchPartText.clear();
                return;
            }
            partsPane.setItems(partsNameFound);
        }
    }

    /** Calls the <code>onSearchPart</code> action event.
     *
     * This method allows the user to initiate the search with the keyboard (ENTER)
     * and to empty the searchPartText field (backSpace).
     *
     * @param keyEvent The event generated when the user press the ENTER button on the keyboard and the focus is on the Search text field searchPartText
     */
    public void onSearchPartText(KeyEvent keyEvent) {
        if(searchPartText.getText().isEmpty()) {
            partsPane.setItems(Inventory.getAllParts());
            partsPane.getSelectionModel().clearSelection();

        }
        if (keyEvent.getCode() == KeyCode.ENTER) {
            onSearchPart(new ActionEvent());
        }

    }

    /**Searches a product by id first, and then by partial or full name.
     * It gets the values from the product's table view text field.
     * <p>
     * This method catches a <code>NumberFormatException</code>: if a string is found, the method will search for the partial name.
     * If the text field searchProductText is empty, the table view is repopulated.
     *<p>
     * If a product is found by id, the product object is highlighted in the table view.
     * If a product is found by name, the product object is filtered in the table view.
     * <p>
     * If no product is found an information message is displayed.
     *</p>
     * @param actionEvent The event generated by the Search button searchProductButton pressed by the user or passed from the keyEvent (never used)
     */
    public void onSearchProduct(ActionEvent actionEvent) {
        //Try to search by ID first
        try {
            if (searchProductText.getText().isEmpty()){//If search field is set to empty, repopulate the table
                productsPane.setItems(Inventory.getAllProducts());
                return;
            }
            Product product = Inventory.lookupProduct(Integer.parseInt(searchProductText.getText()));
            if(product == null){
                throw new NumberFormatException();
            }
            productsPane.getSelectionModel().select(product);

        }
        catch (NumberFormatException e ) {
            String sp = searchProductText.getText();
            ObservableList<Product> productsNameFound = Inventory.lookupProduct(sp);
            if(productsNameFound == null){
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Information");
                alert.setHeaderText("Product not Found");
                alert.showAndWait();
                searchProductText.clear();
                return;
            }
            productsPane.setItems(productsNameFound);
        }
    }

    /**Calls the <code>onSearchProduct</code> action event.
     *
     * This method allows the user to initiate the search with the keyboard (ENTER)
     * and to empty the searchProductText field (backSpace).
     *
     * @param keyEvent The event generated when the user press the ENTER button on the keyboard and the focus is on the Search text field searchProductText
     */
    public void onSearchProductText(KeyEvent keyEvent) {
        if(searchProductText.getText().isEmpty()){
            productsPane.setItems(Inventory.getAllProducts());
            productsPane.getSelectionModel().clearSelection();
        }
        if(keyEvent.getCode() == KeyCode.ENTER){
            onSearchProduct(new ActionEvent());
        }
    }

    /**Loads the <code>addPartForm</code> controller class.
     * It allows to open the <code>addPartForm</code> with the Add button (under the parts' table view) in the <code>mainForm</code>.
     * <p>
     * RUNTIME ERROR: page failed to load the <code>addPartForm</code> on the action event, fixed by adding the controller.addPartForm to the <code>addParForm</code> FXML file.
     * <p>
     * @param actionEvent The event generated by the Add button <code>addPartButton</code> when clicked by the user
     * @throws IOException from the <code>FXMLoader</code>
     */
    public void toAddPartForm(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/addPartForm.fxml"));
        Stage stage = (Stage) ((Button)actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 1400, 675);
        stage.setTitle("Add Part Form");
        stage.setScene(scene);
        stage.show();
    }

    /**Loads the <code>modifyPartForm</code> controller class.
     * It allows to open the <code>modifyPartForm</code> with the Modify button (under the parts' table view) in the <code>mainForm</code>.
     * <p>
     * The static variable <code>productToModify</code> is assigned to the part selected by the user.
     * An error message will be displayed if no part was selected.
     *
     * @param actionEvent The event generated by the Modify button <code>modifyPartButton</code> when clicked by the user
     * @throws IOException from the <code>FXMLoader</code>
     */
    public void toModifyPartForm(ActionEvent actionEvent) throws IOException {
        partToModify = partsPane.getSelectionModel().getSelectedItem();
        if(partToModify != null) {
            Parent root = FXMLLoader.load(getClass().getResource("/view/modifyPartForm.fxml"));
            Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 1400, 675);
            stage.setTitle("Modify Part Form");
            stage.setScene(scene);
            stage.show();
        }
        else {
            errorDisplay(3);
        }
    }

    /**Loads the <code>addPartForm</code> controller class.
     * It allows to open the <code>addProductForm</code> with the Add button (under the products' table view) in the <code>mainForm</code>.
     *
     * @param actionEvent The event generated by the Add button addProductButton when clicked by the user
     * @throws IOException from the <code>FXMLoader</code>
     */
    public void toAddProductForm(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/addProductForm.fxml"));
        Stage stage = (Stage) ((Button)actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 1400, 675);
        stage.setTitle("Add Product Form");
        stage.setScene(scene);
        stage.show();
    }

    /**Loads the <code>modifyProductForm</code> controller class.
     * It allows to open the <code>modifyProductForm</code> with the Modify button (under the products' table view) in the <code>mainForm</code>.
     *<p>
     * The static variable <code>productToModify</code> is assigned to the product selected by the user.
     * An error message will be displayed if no product was selected.
     *
     * @param actionEvent The event generated by the Modify button modifyProductButton when clicked by the user
     * @throws IOException from the <code>FXMLoader</code>
     */
    public void toModifyProductForm(ActionEvent actionEvent) throws IOException {
        productToModify = productsPane.getSelectionModel().getSelectedItem();
        if(productToModify != null) {
            Parent root = FXMLLoader.load(getClass().getResource("/view/modifyProductForm.fxml"));
            Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 1400, 675);
            stage.setTitle("Modify Product Form");
            stage.setScene(scene);
            stage.show();
        }
        else {
            errorDisplay(7);
        }
    }

    /** Removes a part from the ObservableList allParts by calling the <code>deletePart</code> method in the <code>Inventory</code> class.
     * <p>
     * If no part is selected, an error message will be displayed.
     * If a part is selected, a confirmation dialog box will be displayed to confirm the deletion.
     *
     * @param actionEvent The event generated by the Delete button deletePartButton when clicked by the user (never used)
     */
    public void onDeletePart(ActionEvent actionEvent) {
        Part part = partsPane.getSelectionModel().getSelectedItem();
        if (part!= null){
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to remove " + part.getName().toUpperCase() + " from the inventory?");
            Optional<ButtonType> showResult = alert.showAndWait();
            if(showResult.isPresent() && showResult.get() == ButtonType.OK) {
                Inventory.deletePart(part);
            }
        }
        else {
            errorDisplay(1);
        }
    }

    /**Removes a product from the ObservableList allProducts by calling the <code>deleteProduct</code> method of the <code>Inventory</code> class.
     *
     * If no product is selected, an error message will be displayed.
     * If a product is selected, a confirmation dialog box will be displayed to confirm the deletion.
     *
     * @param actionEvent The event generated by the Delete button deleteProductButton when clicked by the user (never used)
     */
    public void onDeleteProduct(ActionEvent actionEvent) {
        Product product = (Product) productsPane.getSelectionModel().getSelectedItem();
        if (product!= null){
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to remove " + product.getName().toUpperCase() + " from the inventory?");
            Optional<ButtonType> showResult = alert.showAndWait();
            if(showResult.isPresent() && showResult.get() == ButtonType.OK) {
                if(product.getAllAssociatedParts().isEmpty()) {
                    Inventory.deleteProduct(product);
                }
                else{
                    errorDisplay(4);
                }
            }
        }
        else {
            errorDisplay(2);
        }
    }

    /**Closes the application.
     *
     * A confirmation dialog box will be displayed to confirm the exit.
     *
     * @param actionEvent The event generated by the Exit button exitButton when clicked by the user (never used)
     */
    public void onExit(ActionEvent actionEvent) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "This will exit the application, do you want to continue?");
        Optional<ButtonType> exit = alert.showAndWait();
        if(exit.isPresent() && exit.get() == ButtonType.OK){
            System.exit(0);
        }
    }

    /**Defines multiple error messages for the <code>mainForm</code>.
     *
     * @param caseNumber the case associated with the error message to be displayed
     */
    private void errorDisplay(int caseNumber) {
        Alert alertError = new Alert(Alert.AlertType.ERROR);

        switch (caseNumber) {

            case 1:
                alertError.setTitle("Error");
                alertError.setHeaderText("No Part Deleted.");
                alertError.setContentText("Please select a part to delete.");
                alertError.showAndWait();
                break;
            case 2:
                alertError.setTitle("Error");
                alertError.setHeaderText("No Product Deleted.");
                alertError.setContentText("Please select a product to delete.");
                alertError.showAndWait();
                break;
            case 3:
                alertError.setTitle("Error");
                alertError.setHeaderText("No Part Selected.");
                alertError.setContentText("Please select a part to modify.");
                alertError.showAndWait();
                break;
            case 4:
                alertError.setTitle("Error");
                alertError.setHeaderText("Product Associated with Part(s)");
                alertError.setContentText("The deletion of a product associated with part(s) is not allowed.");
                alertError.showAndWait();
                break;
            case 5:
                alertError.setTitle("Error");
                alertError.setHeaderText("No Product Selected.");
                alertError.setContentText("Please select a product to modify.");
                alertError.showAndWait();
                break;
        }
    }

    /**First method to run in this controller class, and it populates the tables views.
     * The <code>initialize</code> method is implemented by the <code>Initializable</code> class.
     * <p>
     * Called when the <code>FXMLoader</code> calls the <code>mainForm</code> FXML file.
     *
     *
     * @param url The location used to retrieve relative paths for the root object (null if location unknown)
     * @param resourceBundle The resources used to localize the root object (null if root object not localized)
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        //first call to the Inventory class
        partsPane.setItems(Inventory.getAllParts());
        productsPane.setItems(Inventory.getAllProducts());

        partID.setCellValueFactory(new PropertyValueFactory<>("id"));
        partName.setCellValueFactory(new PropertyValueFactory<>("name"));
        partInventoryLevel.setCellValueFactory(new PropertyValueFactory<>("stock"));
        partPricePerUnit.setCellValueFactory(new PropertyValueFactory<>("price"));

        productID.setCellValueFactory(new PropertyValueFactory<>("id"));
        productName.setCellValueFactory(new PropertyValueFactory<>("name"));
        productInventoryLevel.setCellValueFactory(new PropertyValueFactory<>("stock"));
        productPricePerUnit.setCellValueFactory(new PropertyValueFactory<>("price"));

    }
}
